<!DOCTYPE html>
<html>
	<head>
		<meta charset='utf-8' /><script>console.clear();</script><title>DOM</title>
	</head>
	<body style="background:#000;color:#757575">
		<div>
			<p>1</p>
			<p>2</p>
			<ul id='lista'>
				  <li>Coffee</li>
				  <li>Tea</li>
				  <li>Milk</li>
			</ul>
		</div>
		<div>
			<iframe src='' title='src=http://www.w3schools.com'></iframe>
		</div>
<!--


-->
<script>
//✔ 2Lock
var _Create=Object.create;
var _Slice=Array.prototype.slice;
var _Call=Function.prototype.call;

//✔ is?Data
function isNumber(e){return typeof(e)==='number'};
function isUndefined(e){return typeof(e)==='undefined'};
function isVal(e){return e!==null && !isUndefined(e)};

//✔ is?Dom
function isNode(e){return e instanceof Node};
function isDocument(e){return e.nodeType===9};

//✔ iff
function valOR(a,b){return isVal(a)?a:b};



//✔ Tool 
function defineFunctionCallShortcut(o,p,x){o[p]=_Call.bind(x);return o};
//
/*ℹ Slice Zero-based
							index:
										i[=BeginOfExtraction]
										 As a negative index, indicates an offset from the end of the sequence. 
										 (0 by defaults)

										j[=EndOfExtraction]
										 slice extracts up-to-but-not-including-end.
										 As a negative index, indicates an offset from the end of the sequence. 
										 (If is omitted, slice extracts to the end of the sequence.)

										 e.g.: If m=[0,1,2,3,4,5,6]
																		⤷ slice(-1) extracts [6]
																		⤷ slice(-2) extracts [5,6]

																		⤷ slice(1,-2) extracts[1, 2, 3, 4]

																		⤷ slice(3) extracts [3,4,5,6]

																		⤷ slice(2,6) extracts [2,3,4,5] 
																		⤷ slice(3,6) extracts [3,4,5]
																		⤷ slice(3,5) extracts [3,4]
																		⤷ slice(3,4) extracts [3]
																		
																		⤷ slice(0,-1) extracts [0,1,2, 3, 4, 5]] 
																		⤷ slice(2,-1) extracts [2, 3, 4, 5]] 
																		⤷ slice(4,-1) extracts [ 4, 5]] 
*/
var Slice=defineFunctionCallShortcut(function(x,i,j){return Slice.f(x,isNumber(i)?i:0,j)},'f',_Slice);



//✔ OBJECT Utils
function propertyDescriptor(v,w,e,c){var x=false;return{value:v,writable:w||x,enumerable:e||x,configurable:c||x}};
function describeProperty(v,w,c,e){return propertyDescriptor(v,w,valOR(e,1),c)};
function Properties(){var e,o={},m=Slice(arguments);while(e=m.pop()){var p=e[0],d=e[1];o[p]=describeProperty(d[0],d[1],d[2],d[3])};return o};
//
function SimpleObject(p,o){return _Create(null,p||{})};



//✔ DOM Utils
function getDomContext(e){var d,h,n,j='documentElement',i='ownerDocument',l='defaultView';if(isDocument(e)){d=e;n=h=d[j]}else{d=e[i];n=e;h=d[j]};return SimpleObject(Properties(['referenceNode',[n]],[l,[d[l]]],[i,[d]],[j,[h]]))};


  
 
 
//#
function parseDOM(e){
 var L, stopAT, startNode, nodeContext;
 console.debug('init dom parsing'); 
 if(isNode(e)){
	L=0;
	stopAT=e;
	nodeContext=getDomContext(e);
	startNode=nodeContext.referenceNode
	console.info('nodeContext:\n%O\nstartNode:\n%O',nodeContext,startNode);
	//walkThisBranch(e)
 };
 return 1234
};
//Test:
parseDOM(document.body);

 //
/*document.body
function depth(){};
depth(0)
*/
//{l:f(d[l]),i:f(d),j:}
//console.dir(e)  
//function Collect(){};
//console.log(this.argument)
/*
console.dir(SimpleObject());

*/






/*function(zzz){return Create}

SimpleObject.bind(Object);


//
//



f=propertyDescriptor()
d.;

*/







</script>
	</body>
</html>
